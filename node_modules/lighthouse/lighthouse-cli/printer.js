/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
/**
 * An enumeration of acceptable output modes:
 *   'pretty': Pretty print the results
 *   'json': JSON formatted results
 *   'html': An HTML report
 */
var OutputMode;
(function (OutputMode) {
    OutputMode[OutputMode["pretty"] = 0] = "pretty";
    OutputMode[OutputMode["json"] = 1] = "json";
    OutputMode[OutputMode["html"] = 2] = "html";
})(OutputMode || (OutputMode = {}));
exports.OutputMode = OutputMode;
;
const fs = require('fs');
const ReportGenerator = require('../lighthouse-core/report/report-generator');
const Formatter = require('../lighthouse-core/formatters/formatter');
const log = require('../lighthouse-core/lib/log');
const green = '\x1B[32m';
const red = '\x1B[31m';
const yellow = '\x1b[33m';
const purple = '\x1b[95m';
const reset = '\x1B[0m';
const bold = '\x1b[1m';
const isWindows = process.platform === 'win32';
// See https://github.com/GoogleChrome/lighthouse/issues/1228
const tick = isWindows ? '\u221A' : '✓';
const cross = isWindows ? '\u00D7' : '✘';
const whiteSmallSquare = isWindows ? '\u0387' : '▫';
const doubleLightHorizontal = '──';
/**
 * Verify output path to use, either stdout or a file path.
 */
function checkOutputPath(path) {
    if (!path) {
        log.warn('Printer', 'No output path set; using stdout');
        return 'stdout';
    }
    return path;
}
exports.checkOutputPath = checkOutputPath;
function formatAggregationResultItem(score, suffix) {
    // Until we only support node 6 we can not use default args.
    suffix = suffix || '';
    if (typeof score === 'boolean') {
        return score ? `${green}${tick}${reset}` : `${red}${cross}${reset}`;
    }
    if (typeof score !== 'number') {
        return `${purple}${score}${reset}`;
    }
    let colorChoice = red;
    if (score > 45) {
        colorChoice = yellow;
    }
    if (score > 75) {
        colorChoice = green;
    }
    return `${colorChoice}${score}${suffix}${reset}`;
}
/**
 * Creates the results output in a format based on the `mode`.
 */
function createOutput(results, outputMode) {
    const reportGenerator = new ReportGenerator();
    // HTML report.
    if (outputMode === OutputMode.html) {
        return reportGenerator.generateHTML(results, 'cli');
    }
    // JSON report.
    if (outputMode === OutputMode.json) {
        return JSON.stringify(results, null, 2);
    }
    // Pretty printed.
    const version = results.lighthouseVersion;
    let output = `\n\n${bold}Lighthouse (${version}) results:${reset} ${results.url}\n\n`;
    results.aggregations.forEach(aggregation => {
        const total = aggregation.total ? ': ' + formatAggregationResultItem(Math.round(aggregation.total * 100), '%') : '';
        output += `${whiteSmallSquare} ${bold}${aggregation.name}${reset}${total}\n\n`;
        aggregation.score.forEach(item => {
            const score = (item.overall * 100).toFixed(0);
            if (item.name) {
                output += `${bold}${item.name}${reset}: ${item.scored ? formatAggregationResultItem(score, '%') : ''}\n`;
            }
            item.subItems.forEach(subitem => {
                let auditResult;
                if (typeof subitem === 'string') {
                    auditResult = results.audits[subitem];
                }
                else {
                    auditResult = subitem;
                }
                if (auditResult.comingSoon === true)
                    return;
                let lineItem = ` ${doubleLightHorizontal} ${formatAggregationResultItem(auditResult.score)} ${auditResult.description}`;
                if (auditResult.displayValue) {
                    lineItem += ` (${bold}${auditResult.displayValue}${reset})`;
                }
                output += `${lineItem}\n`;
                if (auditResult.debugString) {
                    output += `    ${auditResult.debugString}\n`;
                }
                if (auditResult.extendedInfo && auditResult.extendedInfo.value) {
                    const formatter = Formatter.getByName(auditResult.extendedInfo.formatter).getFormatter('pretty');
                    output += `${formatter(auditResult.extendedInfo.value)}`;
                }
            });
            output += '\n';
        });
    });
    return output;
}
exports.createOutput = createOutput;
/* istanbul ignore next */
/**
 * Writes the output to stdout.
 */
function writeToStdout(output) {
    return new Promise((resolve, reject) => {
        // small delay to avoid race with debug() logs
        setTimeout(_ => {
            process.stdout.write(`${output}\n`);
            resolve();
        }, 50);
    });
}
/**
 * Writes the output to a file.
 */
function writeFile(filePath, output, outputMode) {
    return new Promise((resolve, reject) => {
        // TODO: make this mkdir to the filePath.
        fs.writeFile(filePath, output, 'utf8', (err) => {
            if (err) {
                return reject(err);
            }
            log.log('Printer', `${OutputMode[outputMode]} output written to ${filePath}`);
            resolve();
        });
    });
}
/**
 * Writes the results.
 */
function write(results, mode, path) {
    return new Promise((resolve, reject) => {
        const outputPath = checkOutputPath(path);
        const output = createOutput(results, OutputMode[mode]);
        // Testing stdout is out of scope, and doesn't really achieve much besides testing Node,
        // so we will skip this chunk of the code.
        /* istanbul ignore if */
        if (outputPath === 'stdout') {
            return writeToStdout(output).then(_ => resolve(results));
        }
        return writeFile(outputPath, output, OutputMode[mode]).then(_ => {
            resolve(results);
        }).catch(err => reject(err));
    });
}
exports.write = write;
function GetValidOutputOptions() {
    return [OutputMode[OutputMode.pretty],
        OutputMode[OutputMode.json],
        OutputMode[OutputMode.html]];
}
exports.GetValidOutputOptions = GetValidOutputOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsWUFBWSxDQUFDO0FBRWI7Ozs7O0dBS0c7QUFDSCxJQUFLLFVBQWlDO0FBQXRDLFdBQUssVUFBVTtJQUFHLCtDQUFNLENBQUE7SUFBRSwyQ0FBSSxDQUFBO0lBQUUsMkNBQUksQ0FBQTtBQUFDLENBQUMsRUFBakMsVUFBVSxLQUFWLFVBQVUsUUFBdUI7QUEwTHBDLGtCQUFVLGNBMUwwQjtBQUFBLENBQUM7QUFLdkMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRWxELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQztBQUN6QixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFDdkIsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0FBQzFCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUM7QUFDeEIsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBRXZCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDO0FBRS9DLDZEQUE2RDtBQUM3RCxNQUFNLElBQUksR0FBRyxTQUFTLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUN4QyxNQUFNLEtBQUssR0FBRyxTQUFTLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUN6QyxNQUFNLGdCQUFnQixHQUFHLFNBQVMsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQ3BELE1B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